#!/usr/bin/env node

var program = require('commander');
var package = JSON.parse(require('fs').readFileSync(__dirname + '/../package.json'));
var edy = require(__dirname + '/../index.js');
var command = {};

function list(val) {
    return val.split(",");
}

program
	.version(package.version)
	.option('-s, --source <file or directory>', 'Source(http, svn, git, ftp, local) File or Directory')
	.option('-r, --root <root directory>', 'Root Directory of Source')
	.option('-p, --protocol <protocol>', 'Source Protocol (ftp, svn, git)')
	.option('-t, --target <file or directory>', 'Target(ftp, scp, rsync, local) File or Directory')
	.option('-e, --exec <remote or local command>', 'Remote Execute') 
	.option('-v, --verbose', 'wheather log view')
	.option('--sync', 'sync')
	.option('--include <items>', 'include', list)	
	.option('--exclude <items>', 'exclude', list)
	
program
  .command('list')
  .description('project list')
  .action(function(){
		command = { type : "list" };		
  });
  
program
  .command('add [id]')
  .description('project add')
  .action(function(id){
		command = { 
			type : "add", 
			options : { 
				id : id 
			}  
		};
  });	 
  
program
  .command('update [id] [attr] [value]')
  .description('project delete')
  .action(function(id, attr, value){
		command = { 
			type : "update", 
			options : { 
				id : id, 
				attr : attr, 
				value : value 
			}  
		};
  });
  
program
  .command('delete [id] [attr]')
  .description('project delete')
  .action(function(id, attr){
		command = { 
			type : "delete", 
			options : { 
				id : id, 
				attr : attr 
			}  
		};
  });	  	  	  	

program
  .command('view [id]')
  .description('project delete')
  .action(function(id){
		command = { 
			type : "view", 
			options : { 
				id : id 
			}  
		};
  });	  	  	  	
	
program.parse(process.argv);

//console.log(program);

var count = program.args.length;
var repl = false;

if (count == 0) {
	repl = true;
} else if (count == 1) {	
	var source = program.args[0];
} else if (count == 2) {
	var source = program.args[0];
	var target = program.args[1];
}	else if (count == 3) {
	var source = program.args[0];
	var root = program.args[1];
	var target = program.args[2];
}

var opt = { 
	source 	: source || program.source || null, 
	root 		: root || program.root || null, 
	protocol 	: program.protocol, 
	target 	: target || program.target || null, 
	verbose : program.verbose,
	exec : program.exec,
  sync : program.sync,
  include : program.include,
  exclude : program.exclude,
  repl : repl,
  command : command , 
  start : false
}

//console.log(program);
//process.exit(0);

// start edy 
var obj = edy.run(opt);

if (!opt.repl) {

obj.on('end', function (protocol, type, err, info) {
	console.log('end %s %s %j', type, protocol, info);
})
obj.on('done', function (protocol, type, err, info) {
	console.log('done %s %s %j', type, protocol);
})

obj.delivery();
}